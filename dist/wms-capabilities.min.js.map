{"version":3,"file":"wms-capabilities.min.js","sources":["../src/utils/isdef.js","../src/xml_parser.js","../src/xsd.js","../src/utils/string.js","../src/xlink.js","../src/parsers.js","../src/node_types.js","../src/index.js"],"sourcesContent":["/**\n * Returns true if the specified value is not undefined.\n *\n * @param {?} val Variable to test.\n * @return {Boolean} Whether variable is defined.\n */\nexport default (val) => val !== void 0;\n\n","import isDef from './utils/isdef';\nimport setIfUndefined from'./utils/setifundefined';\nimport nodeTypes from './node_types';\n\nexport default class XMLParser {\n  /**\n   * XML DOM parser\n   * @constructor\n   * @param {DOMParser} DOMParser\n   */\n  constructor (DOMParser) {\n    /**\n     * @type {DOMParser}\n     */\n    this._parser = new DOMParser();\n  };\n\n  /**\n   * @param  {String} xmlstring\n   * @return {Document}\n   */\n  toDocument (xmlstring) {\n    return this._parser.parseFromString(xmlstring, 'application/xml');\n  }\n\n  /**\n   * Recursively grab all text content of child nodes into a single string.\n   * @param {Node} node Node.\n   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n   * breaks.\n   * @return {string} All text content.\n   * @api\n   */\n  getAllTextContent (node, normalizeWhitespace) {\n    return getAllTextContent(node, normalizeWhitespace, []).join('');\n  }\n}\n\n\n/**\n* Recursively grab all text content of child nodes into a single string.\n* @param {Node} node Node.\n* @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n* breaks.\n* @return {string} All text content.\n* @api\n*/\nexport function getAllTextContent (node, normalizeWhitespace) {\n return getAllTextContentInternal(node, normalizeWhitespace, []).join('');\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @param {Array.<String|string>} accumulator Accumulator.\n * @private\n * @return {Array.<String|string>} Accumulator.\n */\nexport function getAllTextContentInternal (node, normalizeWhitespace, accumulator) {\n  if (node.nodeType === nodeTypes.CDATA_SECTION ||\n    node.nodeType === nodeTypes.TEXT) {\n    if (normalizeWhitespace) {\n      // FIXME understand why goog.dom.getTextContent_ uses String here\n      accumulator.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, ''));\n    } else {\n      accumulator.push(node.nodeValue);\n    }\n  } else {\n    var n;\n    for (n = node.firstChild; n; n = n.nextSibling) {\n      getAllTextContentInternal(n, normalizeWhitespace, accumulator);\n    }\n  }\n  return accumulator;\n}\n\n/**\n * @param {Object.<string, Object.<string, XMLParser.Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @param {*=} bind The object to use as `this`.\n */\nexport function parseNode (parsersNS, node, objectStack, bind) {\n  for (var n = firstElementChild(node); n; n = nextElementSibling(n)) {\n    var namespaceURI = n.namespaceURI || null;\n    var parsers = parsersNS[namespaceURI];\n    if (isDef(parsers)) {\n      var parser = parsers[n.localName];\n      if (isDef(parser)) {\n        parser.call(bind, n, objectStack);\n      }\n    }\n  }\n}\n\n/**\n * Mostly for node.js\n * @param  {Node} node\n * @return {Node}\n */\nexport function firstElementChild (node) {\n  let firstElementChild = node.firstElementChild || node.firstChild;\n  while (firstElementChild && firstElementChild.nodeType !== nodeTypes.ELEMENT) {\n    firstElementChild = firstElementChild.nextSibling;\n  }\n  return firstElementChild;\n}\n\n/**\n * Mostly for node.js\n * @param  {Node} node\n * @return {Node}\n */\nfunction nextElementSibling (node) {\n  let nextSibling = node.nextElementSibling || node.nextSibling;\n  while (nextSibling && nextSibling.nodeType !== nodeTypes.ELEMENT) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\n\n/**\n * @param {Array.<string>} namespaceURIs Namespace URIs.\n * @param {Object.<string, XMLParser.Parser>} parsers Parsers.\n * @param {Object.<string, Object.<string, XMLParser.Parser>>=} opt_parsersNS\n *     ParsersNS.\n * @return {Object.<string, Object.<string, XMLParser.Parser>>} Parsers NS.\n */\nexport function makeParsersNS (namespaceURIs, parsers, opt_parsersNS) {\n  return /** @type {Object.<string, Object.<string, XMLParser.Parser>>} */ (\n    makeStructureNS(namespaceURIs, parsers, opt_parsersNS));\n}\n\n/**\n * Creates a namespaced structure, using the same values for each namespace.\n * This can be used as a starting point for versioned parsers, when only a few\n * values are version specific.\n * @param {Array.<string>} namespaceURIs Namespace URIs.\n * @param {T} structure Structure.\n * @param {Object.<string, T>=} opt_structureNS Namespaced structure to add to.\n * @return {Object.<string, T>} Namespaced structure.\n * @template T\n */\nexport function makeStructureNS (namespaceURIs, structure, opt_structureNS) {\n  /**\n   * @type {Object.<string, *>}\n   */\n  var structureNS = isDef(opt_structureNS) ? opt_structureNS : {};\n  var i, ii;\n  for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {\n    structureNS[namespaceURIs[i]] = structure;\n  }\n  return structureNS;\n}\n\n\n/**\n * @param {function(this: T, Node, Array.<*>): *} valueReader Value reader.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {Function} Parser.\n * @template T\n */\nexport function makeArrayPusher (valueReader, opt_this) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array.<*>} objectStack Object stack.\n     */\n    function(node, objectStack) {\n      var value = valueReader.call(isDef(opt_this) ? opt_this : this,\n        node, objectStack);\n      if (isDef(value)) {\n        var array = objectStack[objectStack.length - 1];\n        array.push(value);\n      }\n    });\n}\n\n/**\n * @param {Object}                                     object Object.\n * @param {Object.<String, Object.<String, Function>>} parsersNS Parsers by namespace.\n * @param {Node}                                       node Node.\n * @param {Array.<*>}                                  objectStack Object stack.\n * @param {*=}                                         bind The object to use as `this`.\n * @return {Object|undefined} Object.\n */\nexport function pushParseAndPop (object, parsersNS, node, objectStack, bind) {\n  objectStack.push(object);\n  parseNode(parsersNS, node, objectStack, bind);\n  return objectStack.pop();\n}\n\n\n/**\n * @param {function(this: T, Node, Array.<*>): *} valueReader Value reader.\n * @param {string=} opt_property Property.\n * @param {T=} opt_this The object to use as `this` in `valueReader`.\n * @return {XMLParser.Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertySetter (valueReader, opt_property, opt_this) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array.<*>} objectStack Object stack.\n     */\n    function(node, objectStack) {\n      let value = valueReader.call(isDef(opt_this) ? opt_this : this,\n        node, objectStack);\n      if (isDef(value)) {\n        var object = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n        var property = isDef(opt_property) ? opt_property : node.localName;\n        object[property] = value;\n      }\n    });\n}\n\n\n/**\n   * @param {function(this: T, Node, Array.<*>): *} valueReader Value reader.\n   * @param {string=} opt_property Property.\n   * @param {T=} opt_this The object to use as `this` in `valueReader`.\n   * @return {Function} Parser.\n   * @template T\n   */\nexport function makeObjectPropertyPusher (valueReader, opt_property, opt_this) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array.<*>} objectStack Object stack.\n     */\n    function(node, objectStack) {\n      var value = valueReader.call(isDef(opt_this) ? opt_this : this,\n        node, objectStack);\n\n      if (isDef(value)) {\n        var object = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n        var property = isDef(opt_property) ? opt_property : node.localName;\n        var array = setIfUndefined(object, property, []);\n        array.push(value);\n      }\n    });\n  }\n","import isDef from './utils/isdef';\nimport { padNumber, trim } from './utils/string';\nimport XMLParser, { getAllTextContent } from './xml_parser';\n\n/**\n * @const\n * @type {string}\n */\nexport const NAMESPACE_URI = 'http://www.w3.org/2001/XMLSchema';\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBoolean (node) {\n  const s = getAllTextContent(node, false);\n  return readBooleanString(s);\n}\n\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBooleanString (string) {\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n  if (m) {\n    return isDef(m[1]) || false;\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nexport function readDateTime (node) {\n  const s = getAllTextContent(node, false);\n  const re = /^\\s*(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|(?:([+\\-])(\\d{2})(?::(\\d{2}))?))\\s*$/;\n  const m = re.exec(s);\n  if (m) {\n    const year = parseInt(m[1], 10);\n    const month = parseInt(m[2], 10) - 1;\n    const day = parseInt(m[3], 10);\n    const hour = parseInt(m[4], 10);\n    const minute = parseInt(m[5], 10);\n    const second = parseInt(m[6], 10);\n    let dateTime = Date.UTC(year, month, day, hour, minute, second) / 1000;\n    if (m[7] != 'Z') {\n      const sign = m[8] == '-' ? -1 : 1;\n      dateTime += sign * 60 * parseInt(m[9], 10);\n      if (isDef(m[10])) {\n        dateTime += sign * 60 * 60 * parseInt(m[10], 10);\n      }\n    }\n    return dateTime;\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimal (node) {\n  return readDecimalString(getAllTextContent(node, false));\n}\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimalString (string) {\n  // FIXME check spec\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n  if (m) {\n    return parseFloat(m[1]);\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeInteger (node) {\n  return readNonNegativeIntegerString(getAllTextContent(node, false));\n}\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nexport function  readNonNegativeIntegerString (string) {\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\n  if (m) {\n    return parseInt(m[1], 10);\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nexport function readString (node) {\n  return trim(getAllTextContent(node, false));\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nexport function writeBooleanTextNode (node, bool) {\n  writeStringTextNode(node, (bool) ? '1' : '0');\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nexport function writeDateTimeTextNode (node, dateTime) {\n  const date = new Date(dateTime * 1000);\n  const string = date.getUTCFullYear() + '-' +\n    padNumber(date.getUTCMonth() + 1, 2) + '-' +\n    padNumber(date.getUTCDate(), 2) + 'T' +\n    padNumber(date.getUTCHours(), 2) + ':' +\n    padNumber(date.getUTCMinutes(), 2) + ':' +\n    padNumber(date.getUTCSeconds(), 2) + 'Z';\n  node.appendChild(XMLParser.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nexport function writeDecimalTextNode (node, decimal) {\n  const string = decimal.toPrecision();\n  node.appendChild(XMLParser.DOCUMENT.createTextNode(string));\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nexport function writeNonNegativeIntegerTextNode (node, nonNegativeInteger) {\n  const string = nonNegativeInteger.toString();\n  node.appendChild(XMLParser.DOCUMENT.createTextNode(string));\n}\n\n\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nexport function writeStringTextNode (node, string) {\n  node.appendChild(XMLParser.DOCUMENT.createTextNode(string));\n}\n","import isDef from './isdef';\n\n/**\n * Make sure we trim BOM and NBSP\n * @type {RegExp}\n */\nconst TRIM_RE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n/**\n * Repeats a string n times.\n * @param {String} string The string to repeat.\n * @param {Number} length The number of times to repeat.\n * @return {String} A string containing {@code length} repetitions of\n *     {@code string}.\n */\nfunction repeat(string, length) {\n  return new Array(length + 1).join(string);\n}\n\n/**\n * @param  {String} str\n * @return {String}\n */\nexport function trim (str) {\n  return str.replace(TRIM_RE, '');\n}\n\n/**\n * Pads number to given length and optionally rounds it to a given precision.\n * For example:\n * <pre>padNumber(1.25, 2, 3) -> '01.250'\n * padNumber(1.25, 2) -> '01.25'\n * padNumber(1.25, 2, 1) -> '01.3'\n * padNumber(1.25, 0) -> '1.25'</pre>\n *\n * @param {Number} num The number to pad.\n * @param {Number} length The desired length.\n * @param {Number=} opt_precision The desired precision.\n * @return {String} {@code num} as a string with the given options.\n */\nexport function padNumber (num, length, opt_precision) {\n  var s = isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);\n  var index = s.indexOf('.');\n  if (index == -1) {\n    index = s.length;\n  }\n  return repeat('0', Math.max(0, length - index)) + s;\n}\n","/**\n * @const\n * @type {string}\n */\nconst NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\n\n/**\n * @param {Node} node Node.\n * @return {Boolean|undefined} Boolean.\n */\nexport function readHref (node) {\n  return node.getAttributeNS(NAMESPACE_URI, 'href');\n}\n","import XMLParser, { \n  makeObjectPropertySetter,\n  makeObjectPropertyPusher,\n  makeParsersNS,\n  pushParseAndPop,\n  makeArrayPusher\n} from './xml_parser';\nimport { \n  readString,\n  readDecimalString,\n  readBooleanString,\n  readNonNegativeIntegerString,\n  readNonNegativeInteger,\n  readDecimal\n} from './xsd';\nimport { readHref } from './xlink';\nimport setIfUndefined from './utils/setifundefined';\nimport isDef from './utils/isdef';\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Attribution object.\n */\nfunction readAttribution(node, objectStack) {\n  return pushParseAndPop({}, ATTRIBUTION_PARSERS, node, objectStack);\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @return {ol.Extent} Bounding box object.\n */\nfunction readBoundingBoxExtent (node) {\n  return [\n    readDecimalString(node.getAttribute('minx')),\n    readDecimalString(node.getAttribute('miny')),\n    readDecimalString(node.getAttribute('maxx')),\n    readDecimalString(node.getAttribute('maxy'))\n  ];\n}\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object} Bounding box object.\n */\nfunction readBoundingBox (node, objectStack) {\n  const extent = readBoundingBoxExtent(node);\n  const resolutions = [\n    readDecimalString(node.getAttribute('resx')),\n    readDecimalString(node.getAttribute('resy'))\n  ];\n\n  return {\n    'crs': node.getAttribute('CRS') || node.getAttribute('SRS'),\n    extent, res: resolutions\n  };\n}\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.Extent|undefined} Bounding box object.\n */\nfunction readLatLonBoundingBox (node, objectStack) {\n  const extent = readBoundingBoxExtent(node);\n\n  if (!isDef(extent[0]) || !isDef(extent[1]) ||\n    !isDef(extent[2]) || !isDef(extent[3])) {\n    return undefined;\n  }\n\n  return extent;\n}\n\n\n/**\n * @privat\n * @param  {Node} node  Node\n * @param  {Arra.<Object>} objectStack Object stack\n * @return {Object}\n */\nfunction readScaleHint (node, objectStack) {\n  const min = parseFloat(node.getAttribute('min'));\n  const max = parseFloat(node.getAttribute('max'));\n\n  return { min, max };\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.Extent|undefined} Bounding box object.\n */\nfunction readEXGeographicBoundingBox (node, objectStack) {\n  const geographicBoundingBox = pushParseAndPop({},\n    EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS,\n    node, objectStack);\n  if (!isDef(geographicBoundingBox)) return undefined;\n\n  const westBoundLongitude = /** @type {number|undefined} */\n    (geographicBoundingBox['westBoundLongitude']);\n  const southBoundLatitude = /** @type {number|undefined} */\n    (geographicBoundingBox['southBoundLatitude']);\n  const eastBoundLongitude = /** @type {number|undefined} */\n    (geographicBoundingBox['eastBoundLongitude']);\n  const northBoundLatitude = /** @type {number|undefined} */\n    (geographicBoundingBox['northBoundLatitude']);\n\n  if (!isDef(westBoundLongitude) || !isDef(southBoundLatitude) ||\n    !isDef(eastBoundLongitude) || !isDef(northBoundLatitude)) {\n    return undefined;\n  }\n\n  return [\n    westBoundLongitude, southBoundLatitude,\n    eastBoundLongitude, northBoundLatitude\n  ];\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} Capability object.\n */\nfunction readCapability (node, objectStack) {\n  return pushParseAndPop({}, CAPABILITY_PARSERS, node, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} Service object.\n */\nfunction readService (node, objectStack) {\n  return pushParseAndPop({}, SERVICE_PARSERS, node, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} Contact information object.\n */\nfunction readContactInformation (node, objectStack) {\n  return pushParseAndPop({}, CONTACT_INFORMATION_PARSERS,\n    node, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} Contact person object.\n */\nfunction readContactPersonPrimary (node, objectStack) {\n  return pushParseAndPop({}, CONTACT_PERSON_PARSERS,\n    node, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} Contact address object.\n */\nfunction readContactAddress (node, objectStack) {\n  return pushParseAndPop({}, CONTACT_ADDRESS_PARSERS,\n    node, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<string>|undefined} Format array.\n */\nfunction readException (node, objectStack) {\n  return pushParseAndPop(\n    [], EXCEPTION_PARSERS, node, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} Layer object.\n */\nfunction readCapabilityLayer (node, objectStack) {\n  const queryable = readBooleanString(node.getAttribute('queryable'));  \n  return pushParseAndPop({\n    queryable: isDef(queryable) ? queryable : false }, \n    LAYER_PARSERS, node, objectStack);\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Layer object.\n */\nfunction readLayer (node, objectStack) {\n  var parentLayerObject = /**  @type {Object.<string,*>} */\n    (objectStack[objectStack.length - 1]);\n\n  const layerObject = /**  @type {Object.<string,*>} */\n    (pushParseAndPop({}, LAYER_PARSERS,\n      node, objectStack));\n\n  if (!isDef(layerObject)) return undefined;\n\n  let queryable = readBooleanString(node.getAttribute('queryable'));\n  if (!isDef(queryable)) {\n    queryable = parentLayerObject['queryable'];\n  }\n  layerObject['queryable'] = isDef(queryable) ? queryable : false;\n\n  let cascaded = readNonNegativeIntegerString(node.getAttribute('cascaded'));\n  if (!isDef(cascaded)) {\n    cascaded = parentLayerObject['cascaded'];\n  }\n  layerObject['cascaded'] = cascaded;\n\n  let opaque = readBooleanString(node.getAttribute('opaque'));\n  if (!isDef(opaque)) {\n    opaque = parentLayerObject['opaque'];\n  }\n  layerObject['opaque'] = isDef(opaque) ? opaque : false;\n\n  let noSubsets = readBooleanString(node.getAttribute('noSubsets'));\n  if (!isDef(noSubsets)) {\n    noSubsets = parentLayerObject['noSubsets'];\n  }\n  layerObject['noSubsets'] = isDef(noSubsets) ? noSubsets : false;\n\n  let fixedWidth = readDecimalString(node.getAttribute('fixedWidth'));\n  if (!isDef(fixedWidth)) {\n    fixedWidth = parentLayerObject['fixedWidth'];\n  }\n  layerObject['fixedWidth'] = fixedWidth;\n\n  let fixedHeight = readDecimalString(node.getAttribute('fixedHeight'));\n  if (!isDef(fixedHeight)) {\n    fixedHeight = parentLayerObject['fixedHeight'];\n  }\n  layerObject['fixedHeight'] = fixedHeight;\n\n  // See 7.2.4.8\n  const addKeys = ['Style', 'CRS', 'AuthorityURL'];\n  for (let i = 0, len = addKeys.length; i < len; i++) {\n    const key = addKeys[i];\n    const parentValue = parentLayerObject[key];\n    if (isDef(parentValue)) {\n      let childValue = setIfUndefined(layerObject, key, []);\n      childValue = childValue.concat(parentValue);\n      layerObject[key] = childValue;\n    }\n  }\n\n  const replaceKeys = ['EX_GeographicBoundingBox', 'BoundingBox', 'Dimension',\n    'Attribution', 'MinScaleDenominator', 'MaxScaleDenominator'\n  ];\n  for (let i = 0, len = replaceKeys.length; i < len; i++) {\n    const key = replaceKeys[i];\n    const childValue = layerObject[key];\n    if (!isDef(childValue)) {\n      const parentValue = parentLayerObject[key];\n      layerObject[key] = parentValue;\n    }\n  }\n\n  return layerObject;\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object} Dimension object.\n */\nfunction readDimension (node, objectStack) {\n  return {\n    'name': node.getAttribute('name'),\n    'units': node.getAttribute('units'),\n    'unitSymbol': node.getAttribute('unitSymbol'),\n    'default': node.getAttribute('default'),\n    'multipleValues': readBooleanString(node.getAttribute('multipleValues')),\n    'nearestValue': readBooleanString(node.getAttribute('nearestValue')),\n    'current': readBooleanString(node.getAttribute('current')),\n    'values': readString(node)\n  };\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Online resource object.\n */\nfunction readFormatOnlineresource (node, objectStack) {\n  return pushParseAndPop({}, FORMAT_ONLINERESOURCE_PARSERS,\n    node, objectStack);\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Request object.\n */\nfunction readRequest (node, objectStack) {\n  return pushParseAndPop({}, REQUEST_PARSERS, node, objectStack);\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} DCP type object.\n */\nfunction readDCPType (node, objectStack) {\n  return pushParseAndPop({}, DCPTYPE_PARSERS, node, objectStack);\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} HTTP object.\n */\nfunction readHTTP (node, objectStack) {\n  return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Operation type object.\n */\nfunction readOperationType (node, objectStack) {\n  return pushParseAndPop({}, OPERATIONTYPE_PARSERS, node, objectStack);\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Online resource object.\n */\nfunction readSizedFormatOnlineresource (node, objectStack) {\n  var formatOnlineresource = readFormatOnlineresource(node, objectStack);\n  if (isDef(formatOnlineresource)) {\n    const size = [\n      readNonNegativeIntegerString(node.getAttribute('width')),\n      readNonNegativeIntegerString(node.getAttribute('height'))\n    ];\n    formatOnlineresource['size'] = size;\n    return formatOnlineresource;\n  }\n  return undefined;\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Authority URL object.\n */\nfunction readAuthorityURL (node, objectStack) {\n  var authorityObject = readFormatOnlineresource(node, objectStack);\n  if (isDef(authorityObject)) {\n    authorityObject['name'] = node.getAttribute('name');\n    return authorityObject;\n  }\n  return undefined;\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Metadata URL object.\n */\nfunction readMetadataURL (node, objectStack) {\n  var metadataObject = readFormatOnlineresource(node, objectStack);\n  if (isDef(metadataObject)) {\n    metadataObject['type'] = node.getAttribute('type');\n    return metadataObject;\n  }\n  return undefined;\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Style object.\n */\nfunction readStyle (node, objectStack) {\n  return pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\n}\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<string>|undefined} Keyword list.\n */\nfunction readKeywordList (node, objectStack) {\n  return pushParseAndPop(\n    [], KEYWORDLIST_PARSERS, node, objectStack);\n}\n\n\n/**\n * @const\n * @type {Array.<string>}\n */\nconst NAMESPACE_URIS = [\n  null,\n  'http://www.opengis.net/wms'\n];\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nexport const PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Service': makeObjectPropertySetter(readService),\n    'Capability': makeObjectPropertySetter(readCapability)\n  });\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst CAPABILITY_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Request': makeObjectPropertySetter(readRequest),\n    'Exception': makeObjectPropertySetter(readException),\n    'Layer': makeObjectPropertySetter(readCapabilityLayer)\n  });\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst SERVICE_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Name': makeObjectPropertySetter(readString),\n    'Title': makeObjectPropertySetter(readString),\n    'Abstract': makeObjectPropertySetter(readString),\n    'KeywordList': makeObjectPropertySetter(readKeywordList),\n    'OnlineResource': makeObjectPropertySetter(readHref),\n    'ContactInformation': makeObjectPropertySetter(readContactInformation),\n    'Fees': makeObjectPropertySetter(readString),\n    'AccessConstraints': makeObjectPropertySetter(readString),\n    'LayerLimit': makeObjectPropertySetter(readNonNegativeInteger),\n    'MaxWidth': makeObjectPropertySetter(readNonNegativeInteger),\n    'MaxHeight': makeObjectPropertySetter(readNonNegativeInteger)\n  });\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst CONTACT_INFORMATION_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'ContactPersonPrimary': makeObjectPropertySetter(readContactPersonPrimary),\n    'ContactPosition': makeObjectPropertySetter(readString),\n    'ContactAddress': makeObjectPropertySetter(readContactAddress),\n    'ContactVoiceTelephone': makeObjectPropertySetter(readString),\n    'ContactFacsimileTelephone': makeObjectPropertySetter(readString),\n    'ContactElectronicMailAddress': makeObjectPropertySetter(readString)\n  });\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst CONTACT_PERSON_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'ContactPerson': makeObjectPropertySetter(readString),\n    'ContactOrganization': makeObjectPropertySetter(readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst CONTACT_ADDRESS_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'AddressType': makeObjectPropertySetter(readString),\n    'Address': makeObjectPropertySetter(readString),\n    'City': makeObjectPropertySetter(readString),\n    'StateOrProvince': makeObjectPropertySetter(readString),\n    'PostCode': makeObjectPropertySetter(readString),\n    'Country': makeObjectPropertySetter(readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst EXCEPTION_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Format': makeArrayPusher(readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst LAYER_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Name': makeObjectPropertySetter(readString),\n    'Title': makeObjectPropertySetter(readString),\n    'Abstract': makeObjectPropertySetter(readString),\n    'KeywordList': makeObjectPropertySetter(readKeywordList),\n    'CRS': makeObjectPropertyPusher(readString),\n    'SRS': makeObjectPropertyPusher(readString),\n    'EX_GeographicBoundingBox': makeObjectPropertySetter(readEXGeographicBoundingBox),\n    'LatLonBoundingBox': makeObjectPropertySetter(readLatLonBoundingBox),\n    'BoundingBox': makeObjectPropertyPusher(readBoundingBox),\n    'Dimension': makeObjectPropertyPusher(readDimension),\n    'Attribution': makeObjectPropertySetter(readAttribution),\n    'AuthorityURL': makeObjectPropertyPusher(readAuthorityURL),\n    'Identifier': makeObjectPropertyPusher(readString),\n    'MetadataURL': makeObjectPropertyPusher(readMetadataURL),\n    'DataURL': makeObjectPropertyPusher(readFormatOnlineresource),\n    'FeatureListURL': makeObjectPropertyPusher(readFormatOnlineresource),\n    'Style': makeObjectPropertyPusher(readStyle),\n    'MinScaleDenominator': makeObjectPropertySetter(readDecimal),\n    'MaxScaleDenominator': makeObjectPropertySetter(readDecimal),\n    'ScaleHint': makeObjectPropertySetter(readScaleHint),\n    'Layer': makeObjectPropertyPusher(readLayer)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst ATTRIBUTION_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Title': makeObjectPropertySetter(readString),\n    'OnlineResource': makeObjectPropertySetter(readHref),\n    'LogoURL': makeObjectPropertySetter(readSizedFormatOnlineresource)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS =\n  makeParsersNS(NAMESPACE_URIS, {\n    'westBoundLongitude': makeObjectPropertySetter(readDecimal),\n    'eastBoundLongitude': makeObjectPropertySetter(readDecimal),\n    'southBoundLatitude': makeObjectPropertySetter(readDecimal),\n    'northBoundLatitude': makeObjectPropertySetter(readDecimal)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst REQUEST_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'GetCapabilities': makeObjectPropertySetter(\n      readOperationType),\n    'GetMap': makeObjectPropertySetter(\n      readOperationType),\n    'GetFeatureInfo': makeObjectPropertySetter(\n      readOperationType)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst OPERATIONTYPE_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Format': makeObjectPropertyPusher(readString),\n    'DCPType': makeObjectPropertyPusher(\n      readDCPType)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst DCPTYPE_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'HTTP': makeObjectPropertySetter(\n      readHTTP)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst HTTP_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Get': makeObjectPropertySetter(\n      readFormatOnlineresource),\n    'Post': makeObjectPropertySetter(\n      readFormatOnlineresource)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst STYLE_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Name': makeObjectPropertySetter(readString),\n    'Title': makeObjectPropertySetter(readString),\n    'Abstract': makeObjectPropertySetter(readString),\n    'LegendURL': makeObjectPropertyPusher(readSizedFormatOnlineresource),\n    'StyleSheetURL': makeObjectPropertySetter(readFormatOnlineresource),\n    'StyleURL': makeObjectPropertySetter(readFormatOnlineresource)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst FORMAT_ONLINERESOURCE_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Format': makeObjectPropertySetter(readString),\n    'OnlineResource': makeObjectPropertySetter(readHref)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, XMLParser.Parser>>}\n * @private\n */\nconst KEYWORDLIST_PARSERS = makeParsersNS(\n  NAMESPACE_URIS, {\n    'Keyword': makeArrayPusher(readString)\n  });\n","/**\n * @enum {Number}\n */\nconst NODE_TYPES = {\n  ELEMENT: 1,\n  ATTRIBUTE: 2,\n  TEXT: 3,\n  CDATA_SECTION: 4,\n  ENTITY_REFERENCE: 5,\n  ENTITY: 6,\n  PROCESSING_INSTRUCTION: 7,\n  COMMENT: 8,\n  DOCUMENT: 9,\n  DOCUMENT_TYPE: 10,\n  DOCUMENT_FRAGMENT: 11,\n  NOTATION: 12\n};\n\nexport default NODE_TYPES;\n","import XMLParser, { pushParseAndPop } from './xml_parser';\nimport nodeTypes from './node_types';\nimport { PARSERS } from './parsers';\n\nexport default class WMS {\n  /**\n   * WMS Capabilities parser\n   *\n   * @param {String=} xmlString\n   * @constructor\n   */\n  constructor(xmlString, DOMParser) {\n    if (!DOMParser && typeof window !== 'undefined') {\n      DOMParser = window.DOMParser;\n    }\n\n    /**\n     * @type {String}\n     */\n    this.version = undefined;\n\n    /**\n     * @type {XMLParser}\n     */\n    this._parser = new XMLParser(DOMParser);\n\n    /**\n     * @type {String=}\n     */\n    this._data = xmlString;\n  }\n\n\n  /**\n   * @param {String} xmlString\n   * @return {WMS}\n   */\n  data (xmlString) {\n    this._data = xmlString;\n    return this;\n  }\n\n  /**\n   * @param  {String=} xmlString\n   * @return {Object}\n   */\n  toJSON (xmlString) {\n    xmlString = xmlString || this._data;\n    return this.parse(xmlString);\n  }\n\n  /**\n   * @return {String} xml\n   */\n  parse (xmlString) {\n    return this._readFromDocument(this._parser.toDocument(xmlString));\n  }\n\n  /**\n   * @param  {Document} doc\n   * @return {Object}\n   */\n  _readFromDocument (doc) {\n    for (let node = doc.firstChild; node; node = node.nextSibling) {\n      if (node.nodeType == nodeTypes.ELEMENT) {\n        return this.readFromNode(node);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param  {DOMNode} node\n   * @return {Object}\n   */\n  readFromNode (node) {\n    this.version = node.getAttribute('version');\n    const wmsCapabilityObject = pushParseAndPop({\n      'version': this.version\n    }, PARSERS, node, []);\n\n    return wmsCapabilityObject || null;\n  }\n}\n    "],"names":["isDef","getAllTextContentInternal","normalizeWhitespace","n","nextElementSibling","let","nextSibling","nodeType","makeParsersNS","i","makeArrayPusher","push","pushParseAndPop","firstElementChild","parsers","parser","makeObjectPropertySetter","property","object","makeObjectPropertyPusher","readBooleanString","const","readDecimal","readDecimalString","readNonNegativeInteger","readNonNegativeIntegerString","exec","readString","replace","readHref","node","getAttributeNS","readBoundingBoxExtent","getAttribute","readFormatOnlineresource","readOperationType","readSizedFormatOnlineresource","readKeywordList","ATTRIBUTE","TEXT","CDATA_SECTION","ENTITY_REFERENCE","ENTITY","PROCESSING_INSTRUCTION","COMMENT","DOCUMENT","DOCUMENT_TYPE","DOCUMENT_FRAGMENT","NOTATION","XMLParser","prototype","toDocument","getAllTextContent","readService","readCapability","CAPABILITY_PARSERS","readRequest","readException","readCapabilityLayer","LAYER_PARSERS","readContactInformation","readContactPersonPrimary","readContactAddress","CONTACT_ADDRESS_PARSERS","readEXGeographicBoundingBox","eastBoundLongitude","northBoundLatitude","readLatLonBoundingBox","readBoundingBox","resolutions","extent","readDimension","readAttribution","ATTRIBUTION_PARSERS","readAuthorityURL","readMetadataURL","readStyle","readScaleHint","max","parseFloat","readLayer","parentLayerObject","addKeys","length","parentValue","layerObject","i$1","readDCPType","readHTTP","DOMParser","window","WMS","data","toJSON","xmlString","parse","_readFromDocument","readFromNode"],"mappings":"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"}